.staging_monitoring:
  extends: .stfc_techops
  variables:
    ENVIRONMENT: staging
    REQUIRED_SSH_KEYS: "ska-techops.pem,ska-staging.pem"
    SERVICE: monitoring
    PLAYBOOKS_HOSTS: "stfc-techops-staging-prometheus"
  environment:
    name: stfc-techops-staging-monitoring
    deployment_tier: staging

staging_monitoring_plan:
  extends:
    - .staging_monitoring
    - .orchestration_plan
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULED_JOB == "staging_monitoring_orchestration"
    - !reference [.dettached_trigger]

staging_monitoring_apply:
  extends:
    - .staging_monitoring
    - .orchestration_apply
  needs:
    - staging_monitoring_plan
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULED_JOB == "staging_monitoring_orchestration"
      when: manual
    - !reference [.manual_trigger]

staging_monitoring_install:
  stage: staging_install
  extends:
    - .staging_monitoring
    - .installation_dependencies
  variables:
    REINSTALL: "false"
  script:
    - make orch generate-inventory
    - 'echo "prometheus_node_metric_relabel_configs: []" > ./ska-ser-ansible-collections/prometheus_node_metric_relabel_configs.yaml'
    - make playbooks monitoring prometheus
    - make playbooks monitoring thanos
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULED_JOB == "staging_monitoring_install"
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULED_JOB == "production_monitoring_install"
    - !reference [.dettached_trigger]

staging_monitoring_destroy:
  stage: staging_install
  extends:
    - .staging_monitoring
    - .installation_dependencies
  script:
    - make orch generate-inventory
    - make playbooks monitoring destroy
  rules:
    - !reference [.dettached_trigger]

staging_monitoring_test:
  stage: staging_test
  extends:
    - .staging_monitoring
    - .installation_dependencies
  needs:
    - staging_monitoring_install
  script:
    - make orch generate-inventory
    - make playbooks monitoring test
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULED_JOB == "staging_monitoring_install"
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULED_JOB == "production_monitoring_install"
    - !reference [.default_trigger]
